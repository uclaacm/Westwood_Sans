{
.appVersion = "1350";
DisplayStrings = (
"0"
);
customParameters = (
{
name = panose;
value = (
0,
0,
5,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0
);
},
{
name = glyphOrder;
value = (
.notdef,
space,
A,
B,
C,
D,
E,
F,
G,
H,
I,
J,
K,
L,
M,
N,
O,
P,
Q,
R,
S,
T,
U,
V,
W,
X,
Y,
Z,
a,
b,
c,
d,
e,
f,
g,
h,
i,
j,
k,
l,
m,
n,
o,
p,
q,
r,
s,
t,
u,
v,
w,
x,
y,
z,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
period,
comma,
exclam,
hyphen
);
}
);
date = "2021-01-31 03:13:21 +0000";
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
familyName = "Westwood Sans";
fontMaster = (
{
ascender = 800;
capHeight = 735;
customParameters = (
{
name = typoAscender;
value = 800;
},
{
name = typoDescender;
value = -230;
},
{
name = typoLineGap;
value = 170;
},
{
name = winAscent;
value = 970;
},
{
name = winDescent;
value = 230;
},
{
name = hheaAscender;
value = 970;
},
{
name = hheaDescender;
value = -230;
},
{
name = strikeoutPosition;
value = 300;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01223 1 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01212 8 1 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01220 6 1 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 8 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 3 values pushed */\012832 1 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 9 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 3 values pushed */\01264 1 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 4 values pushed */\01214 6 1 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
106,
106,
114,
114,
735,
0,
735,
500,
0,
-230,
735,
0,
735,
500,
0,
-230
);
}
);
descender = -230;
id = "D2426170-52AE-4FAB-827B-222948BED425";
weightValue = 400;
widthValue = 5;
xHeight = 500;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"422 -230 LINE",
"422 800 LINE",
"96 800 LINE",
"96 -230 LINE"
);
},
{
closed = 1;
nodes = (
"275 659 LINE",
"343 659 LINE",
"343 625 LINE",
"172 625 LINE",
"172 659 LINE",
"240 659 LINE",
"240 697 LINE",
"173 697 LINE",
"173 731 LINE",
"343 731 LINE",
"343 697 LINE",
"275 697 LINE"
);
},
{
closed = 1;
nodes = (
"343 491 LINE",
"172 491 LINE",
"172 598 LINE",
"275 598 LINE",
"275 526 LINE",
"343 526 LINE"
);
},
{
closed = 1;
nodes = (
"240 526 LINE",
"240 563 LINE",
"206 563 LINE",
"206 526 LINE"
);
},
{
closed = 1;
nodes = (
"275 357 LINE",
"172 357 LINE",
"172 391 LINE",
"240 391 LINE",
"240 429 LINE",
"172 429 LINE",
"172 463 LINE",
"343 463 LINE",
"343 429 LINE",
"275 429 LINE"
);
},
{
closed = 1;
nodes = (
"172 333 LINE",
"309 333 LINE",
"309 401 LINE",
"343 401 LINE",
"343 298 LINE",
"172 298 LINE"
);
},
{
closed = 1;
nodes = (
"172 276 LINE",
"206 276 LINE",
"206 193 LINE",
"309 193 LINE",
"309 242 LINE",
"275 242 LINE",
"275 218 LINE",
"240 218 LINE",
"240 276 LINE",
"343 276 LINE",
"343 159 LINE",
"172 159 LINE"
);
},
{
closed = 1;
nodes = (
"172 98 LINE",
"343 98 LINE",
"343 -19 LINE",
"172 -19 LINE"
);
},
{
closed = 1;
nodes = (
"309 15 LINE",
"309 64 LINE",
"206 64 LINE",
"206 15 LINE"
);
},
{
closed = 1;
nodes = (
"238 -125 LINE",
"343 -125 LINE",
"343 -159 LINE",
"172 -159 LINE",
"172 -125 LINE",
"244 -77 LINE",
"172 -77 LINE",
"172 -43 LINE",
"343 -43 LINE",
"343 -77 LINE",
"310 -77 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 247 values pushed */\01267 1 34 1 75 0 23 21 22 22 23 114 0 0 0 2 3 0 2 103 36 7 2 3 6 1 4 5 3 4 103 0 5 0 8 11 5 8 103 0 11 12 37 2 10 9 11 10 103 0 9 0 13 14 9 13 103 0 18 15 14 18 87 38 17 2 14 0 15 16 14 15 103 0 16 0 19 20 16 19 103 39 1 20 25 1 21 23 20 21 103 0 22 0 24 26 22 24 104 40 1 26 0 27 29 26 27 103 0 29 0 30 28 29 30 103 41 1 28 0 31 32 28 31 103 42 35 2 32 0 34 33 32 34 103 0 33 1 1 33 87 0 33 33 1 95 0 1 33 1 79 62 62 54 54 42 42 36 36 26 26 16 16 4 4 62 72 62 72 71 70 69 68 66 65 64 63 61 60 59 58 54 57 54 57 56 55 42 53 42 53 52 51 50 49 48 47 46 45 44 43 36 41 36 41 40 39 38 37 26 35 26 35 34 33 32 31 30 29 28 27 25 24 23 22 16 21 16 21 20 19 18 17 4 15 4 15 17 17 17 17 18 17 16 43 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = .notdef;
},
{
glyphname = space;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
width = 420;
}
);
note = space;
unicode = 0020;
},
{
glyphname = A;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"316 735 LINE",
"40 0 LINE",
"169 0 LINE",
"212 114 LINE",
"563 114 LINE",
"606 0 LINE",
"729 0 LINE",
"453 735 LINE"
);
},
{
closed = 1;
nodes = (
"255 228 LINE",
"389 581 LINE",
"521 228 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0120 4 0 1 0 4 1 104 0 3 3 14 77 2 1 0 0 15 0 78 18 17 17 17 16 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = A;
unicode = 0041;
},
{
glyphname = B;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"496 417 OFFCURVE",
"538 497 OFFCURVE",
"538 544 QCURVE SMOOTH",
"538 595 OFFCURVE",
"482 681 OFFCURVE",
"387 733 OFFCURVE",
"331 735 QCURVE SMOOTH",
"40 735 LINE",
"40 0 LINE",
"354 0 LINE SMOOTH",
"415 0 OFFCURVE",
"516 53 OFFCURVE",
"576 147 OFFCURVE",
"576 207 QCURVE SMOOTH",
"576 265 OFFCURVE",
"512 363 OFFCURVE",
"459 389 QCURVE"
);
},
{
closed = 1;
nodes = (
"375 628 OFFCURVE",
"430 570 OFFCURVE",
"430 528 QCURVE SMOOTH",
"430 488 OFFCURVE",
"376 436 OFFCURVE",
"331 436 QCURVE SMOOTH",
"155 436 LINE",
"155 628 LINE",
"331 628 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"354 107 LINE",
"155 107 LINE",
"155 329 LINE",
"354 329 LINE",
"362 329 LINE SMOOTH",
"407 329 OFFCURVE",
"469 261 OFFCURVE",
"469 214 QCURVE SMOOTH",
"469 187 OFFCURVE",
"441 138 OFFCURVE",
"391 107 OFFCURVE",
"362 107 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */\01216 1 4 2 1 76 0 2 0 4 5 2 4 103 6 1 3 3 1 95 0 1 1 14 77 7 1 5 5 0 95 0 0 0 15 0 78 26 26 17 17 26 37 26 35 34 31 17 25 17 24 40 33 37 8 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = B;
unicode = 0042;
},
{
glyphname = C;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"564 158 OFFCURVE",
"463 115 OFFCURVE",
"400 115 QCURVE SMOOTH",
"332 115 OFFCURVE",
"215 181 OFFCURVE",
"147 297 OFFCURVE",
"147 368 QCURVE SMOOTH",
"147 439 OFFCURVE",
"215 554 OFFCURVE",
"332 620 OFFCURVE",
"400 620 QCURVE SMOOTH",
"457 620 OFFCURVE",
"558 577 OFFCURVE",
"599 536 QCURVE",
"698 582 LINE",
"652 656 OFFCURVE",
"498 735 OFFCURVE",
"400 735 QCURVE SMOOTH",
"305 735 OFFCURVE",
"139 637 OFFCURVE",
"40 469 OFFCURVE",
"40 368 QCURVE SMOOTH",
"40 266 OFFCURVE",
"137 98 OFFCURVE",
"302 0 OFFCURVE",
"400 0 QCURVE SMOOTH",
"504 0 OFFCURVE",
"661 81 OFFCURVE",
"706 161 QCURVE",
"599 199 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\01229 15 14 3 3 2 1 76 0 2 2 1 97 0 1 1 14 77 0 3 3 0 97 0 0 0 15 0 78 38 37 38 34 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 736;
}
);
note = C;
unicode = 0043;
},
{
glyphname = D;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"40 735 LINE",
"40 0 LINE",
"300 0 LINE SMOOTH",
"398 0 OFFCURVE",
"555 97 OFFCURVE",
"644 265 OFFCURVE",
"644 368 QCURVE SMOOTH",
"644 469 OFFCURVE",
"552 638 OFFCURVE",
"394 735 OFFCURVE",
"300 735 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"300 107 LINE",
"147 107 LINE",
"147 628 LINE",
"307 628 LINE",
"324 628 LINE SMOOTH",
"416 622 OFFCURVE",
"529 487 OFFCURVE",
"529 375 QCURVE SMOOTH",
"529 296 OFFCURVE",
"477 178 OFFCURVE",
"385 111 OFFCURVE",
"324 107 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\0120 2 2 1 95 4 1 1 1 14 77 5 1 3 3 0 95 0 0 0 15 0 78 11 11 0 0 11 22 11 20 19 16 0 10 0 9 38 6 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = D;
unicode = 0044;
},
{
glyphname = E;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"70 0 LINE",
"507 0 LINE",
"507 108 LINE",
"178 108 LINE",
"178 314 LINE",
"483 314 LINE",
"483 421 LINE",
"178 421 LINE",
"178 628 LINE",
"507 628 LINE",
"507 735 LINE",
"70 735 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\0120 1 0 2 3 1 2 103 0 0 0 5 95 6 1 5 5 14 77 0 3 3 4 95 0 4 4 15 4 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = E;
unicode = 0045;
},
{
glyphname = F;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"40 0 LINE",
"147 0 LINE",
"147 314 LINE",
"477 314 LINE",
"477 413 LINE",
"147 413 LINE",
"147 628 LINE",
"523 628 LINE",
"523 735 LINE",
"40 735 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */\0120 1 0 2 3 1 2 103 0 0 0 4 95 5 1 4 4 14 77 0 3 3 15 3 78 0 0 0 9 0 9 17 17 17 17 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = F;
unicode = 0046;
},
{
glyphname = G;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"392 368 LINE",
"392 268 LINE",
"621 268 LINE",
"599 195 OFFCURVE",
"475 114 OFFCURVE",
"392 114 QCURVE SMOOTH",
"324 114 OFFCURVE",
"212 180 OFFCURVE",
"147 296 OFFCURVE",
"147 368 QCURVE SMOOTH",
"147 439 OFFCURVE",
"212 554 OFFCURVE",
"324 620 OFFCURVE",
"392 620 QCURVE SMOOTH",
"454 620 OFFCURVE",
"566 567 OFFCURVE",
"607 520 QCURVE",
"699 567 LINE",
"653 647 OFFCURVE",
"490 735 OFFCURVE",
"392 735 QCURVE SMOOTH",
"298 735 OFFCURVE",
"136 637 OFFCURVE",
"40 469 OFFCURVE",
"40 368 QCURVE SMOOTH",
"40 266 OFFCURVE",
"133 97 OFFCURVE",
"294 0 OFFCURVE",
"392 0 QCURVE SMOOTH",
"496 0 OFFCURVE",
"655 86 OFFCURVE",
"744 251 OFFCURVE",
"744 368 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\01215 14 2 5 2 1 76 0 5 0 4 3 5 4 103 0 2 2 1 97 0 1 1 14 77 0 3 3 0 97 0 0 0 15 0 78 17 18 38 37 38 34 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 784;
}
);
note = G;
unicode = 0047;
},
{
glyphname = H;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"147 735 LINE",
"40 735 LINE",
"40 0 LINE",
"147 0 LINE",
"147 306 LINE",
"507 306 LINE",
"507 0 LINE",
"614 0 LINE",
"614 735 LINE",
"507 735 LINE",
"507 413 LINE",
"147 413 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\0126 1 5 0 2 1 5 2 103 4 1 0 0 14 77 3 1 1 1 15 1 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 654;
}
);
note = H;
unicode = 0048;
},
{
glyphname = I;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"40 0 LINE",
"40 735 LINE",
"149 735 LINE",
"149 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 0 0 14 77 0 1 1 15 1 78 17 16 2 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 189;
}
);
note = I;
unicode = 0049;
},
{
glyphname = J;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"411 223 OFFCURVE",
"375 148 OFFCURVE",
"309 99 OFFCURVE",
"262 99 QCURVE SMOOTH",
"171 99 OFFCURVE",
"124 160 QCURVE",
"40 107 LINE",
"70 59 OFFCURVE",
"182 0 OFFCURVE",
"255 0 QCURVE SMOOTH",
"330 0 OFFCURVE",
"452 69 OFFCURVE",
"522 188 OFFCURVE",
"522 261 QCURVE SMOOTH",
"522 735 LINE",
"415 735 LINE",
"415 261 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\01216 10 9 3 2 0 1 76 0 0 0 14 77 0 2 2 1 97 0 1 1 15 1 78 36 36 16 3 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = J;
unicode = 004A;
},
{
glyphname = K;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"611 735 LINE",
"462 735 LINE",
"150 362 LINE",
"150 735 LINE",
"40 735 LINE",
"40 0 LINE",
"150 0 LINE",
"150 200 LINE",
"226 288 LINE",
"486 0 LINE",
"634 0 LINE",
"300 373 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01211 8 3 2 4 0 2 1 76 3 1 2 2 14 77 1 1 0 0 15 0 78 18 17 19 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = K;
unicode = 004B;
},
{
glyphname = L;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"40 0 LINE",
"507 0 LINE",
"507 107 LINE",
"147 107 LINE",
"147 735 LINE",
"40 735 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0123 1 2 2 14 77 0 0 0 1 96 0 1 1 15 1 78 0 0 0 5 0 5 17 17 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = L;
unicode = 004C;
},
{
glyphname = M;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"416 266 LINE",
"204 735 LINE",
"40 735 LINE",
"40 0 LINE",
"157 0 LINE",
"157 549 LINE",
"353 125 LINE",
"369 87 LINE",
"384 47 LINE",
"447 47 LINE",
"682 552 LINE",
"682 0 LINE",
"791 0 LINE",
"791 735 LINE",
"635 735 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\01213 8 3 3 1 3 1 76 0 1 3 0 3 1 0 128 5 4 2 3 3 14 77 2 1 0 0 15 0 78 0 0 0 14 0 14 17 20 18 17 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 831;
}
);
note = M;
unicode = 004D;
},
{
glyphname = N;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"60 735 LINE",
"60 0 LINE",
"170 0 LINE",
"170 573 LINE",
"560 0 LINE",
"685 0 LINE",
"685 735 LINE",
"576 735 LINE",
"576 160 LINE",
"185 735 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\0125 0 2 1 0 1 76 3 1 0 0 14 77 2 1 1 1 15 1 78 17 18 17 17 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = N;
unicode = 004E;
},
{
glyphname = O;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"305 735 OFFCURVE",
"140 637 OFFCURVE",
"40 469 OFFCURVE",
"40 368 QCURVE SMOOTH",
"40 266 OFFCURVE",
"137 98 OFFCURVE",
"302 0 OFFCURVE",
"400 0 QCURVE SMOOTH",
"502 0 OFFCURVE",
"671 97 OFFCURVE",
"768 266 OFFCURVE",
"768 368 QCURVE SMOOTH",
"768 469 OFFCURVE",
"668 637 OFFCURVE",
"498 735 OFFCURVE",
"400 735 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"332 115 OFFCURVE",
"215 181 OFFCURVE",
"147 297 OFFCURVE",
"147 368 QCURVE SMOOTH",
"147 439 OFFCURVE",
"215 554 OFFCURVE",
"332 620 OFFCURVE",
"400 620 QCURVE SMOOTH",
"468 620 OFFCURVE",
"584 554 OFFCURVE",
"653 439 OFFCURVE",
"653 368 QCURVE SMOOTH",
"653 296 OFFCURVE",
"588 180 OFFCURVE",
"472 115 OFFCURVE",
"400 115 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\0120 2 2 1 97 4 1 1 1 14 77 5 1 3 3 0 97 0 0 0 15 0 78 16 16 0 0 16 31 16 30 24 22 0 15 0 14 38 6 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 798;
}
);
note = O;
unicode = 004F;
},
{
glyphname = P;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"323 735 LINE",
"60 735 LINE",
"60 0 LINE",
"167 0 LINE",
"167 237 LINE",
"343 237 LINE",
"351 237 LINE SMOOTH",
"419 237 OFFCURVE",
"535 305 OFFCURVE",
"604 418 OFFCURVE",
"604 482 QCURVE SMOOTH",
"604 550 OFFCURVE",
"535 666 OFFCURVE",
"419 735 OFFCURVE",
"351 735 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"167 628 LINE",
"343 628 LINE SMOOTH",
"381 628 OFFCURVE",
"444 591 OFFCURVE",
"481 528 OFFCURVE",
"481 490 QCURVE SMOOTH",
"481 452 OFFCURVE",
"444 389 OFFCURVE",
"381 352 OFFCURVE",
"343 352 QCURVE SMOOTH",
"167 352 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\0126 1 3 0 0 1 3 0 103 0 4 4 2 95 5 1 2 2 14 77 0 1 1 15 1 78 16 15 0 0 24 22 15 25 16 25 0 14 0 12 17 54 7 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = P;
unicode = 0050;
},
{
glyphname = Q;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"776 473 OFFCURVE",
"675 640 OFFCURVE",
"504 735 OFFCURVE",
"404 735 QCURVE SMOOTH",
"308 735 OFFCURVE",
"140 640 OFFCURVE",
"40 473 OFFCURVE",
"40 371 QCURVE SMOOTH",
"40 268 OFFCURVE",
"138 98 OFFCURVE",
"305 0 OFFCURVE",
"404 0 QCURVE SMOOTH",
"509 0 OFFCURVE",
"597 52 QCURVE",
"706 -23 LINE",
"776 70 LINE",
"689 130 LINE",
"731 179 OFFCURVE",
"776 302 OFFCURVE",
"776 371 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"335 116 OFFCURVE",
"218 182 OFFCURVE",
"149 299 OFFCURVE",
"149 371 QCURVE SMOOTH",
"149 443 OFFCURVE",
"218 560 OFFCURVE",
"335 627 OFFCURVE",
"404 627 QCURVE SMOOTH",
"473 627 OFFCURVE",
"590 560 OFFCURVE",
"659 443 OFFCURVE",
"659 371 QCURVE SMOOTH",
"659 320 OFFCURVE",
"625 230 OFFCURVE",
"594 196 QCURVE",
"474 279 LINE",
"404 186 LINE",
"487 128 LINE",
"448 116 OFFCURVE",
"404 116 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */\01224 23 22 21 2 5 3 2 5 3 2 0 3 2 76 4 1 0 73 0 2 2 1 97 0 1 1 14 77 4 1 3 3 0 97 0 0 0 15 0 78 20 20 20 39 20 38 46 38 38 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 816;
}
);
note = Q;
unicode = 0051;
},
{
glyphname = R;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"427 274 LINE",
"490 302 OFFCURVE",
"569 419 OFFCURVE",
"569 490 QCURVE SMOOTH",
"569 558 OFFCURVE",
"505 670 OFFCURVE",
"395 735 OFFCURVE",
"331 735 QCURVE SMOOTH",
"323 735 LINE",
"40 735 LINE",
"40 0 LINE",
"147 0 LINE",
"147 253 LINE",
"315 253 LINE",
"454 0 LINE",
"584 0 LINE"
);
},
{
closed = 1;
nodes = (
"323 628 LINE SMOOTH",
"357 628 OFFCURVE",
"414 592 OFFCURVE",
"446 532 OFFCURVE",
"446 498 QCURVE SMOOTH",
"446 464 OFFCURVE",
"414 404 OFFCURVE",
"357 368 OFFCURVE",
"323 368 QCURVE SMOOTH",
"316 368 LINE",
"147 368 LINE",
"147 628 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */\01214 1 0 4 1 76 0 4 0 0 1 4 0 103 0 5 5 2 95 0 2 2 14 77 6 3 2 1 1 15 1 78 0 0 27 25 19 16 0 15 0 15 49 17 17 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 634;
}
);
note = R;
unicode = 0052;
},
{
glyphname = S;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"464 683 OFFCURVE",
"500 642 OFFCURVE",
"525 601 OFFCURVE",
"528 597 QCURVE",
"428 550 LINE",
"417 567 OFFCURVE",
"412 573 QCURVE SMOOTH",
"408 578 OFFCURVE",
"378 617 OFFCURVE",
"365 621 QCURVE SMOOTH",
"340 630 OFFCURVE",
"311 630 QCURVE SMOOTH",
"292 630 OFFCURVE",
"280 628 QCURVE SMOOTH",
"273 627 OFFCURVE",
"251 624 OFFCURVE",
"241 621 QCURVE SMOOTH",
"226 617 OFFCURVE",
"205 599 OFFCURVE",
"203 597 QCURVE SMOOTH",
"184 581 OFFCURVE",
"176 569 OFFCURVE",
"172 550 QCURVE SMOOTH",
"171 545 OFFCURVE",
"171 535 QCURVE SMOOTH",
"171 518 OFFCURVE",
"184 490 OFFCURVE",
"195 481 QCURVE SMOOTH",
"207 471 OFFCURVE",
"334 420 QCURVE SMOOTH",
"361 408 OFFCURVE",
"436 376 OFFCURVE",
"443 372 QCURVE SMOOTH",
"455 365 OFFCURVE",
"466 357 OFFCURVE",
"473 349 QCURVE SMOOTH",
"528 294 OFFCURVE",
"528 218 QCURVE SMOOTH",
"528 150 OFFCURVE",
"448 46 OFFCURVE",
"381 16 QCURVE SMOOTH",
"346 0 OFFCURVE",
"303 0 QCURVE SMOOTH",
"242 0 OFFCURVE",
"159 17 OFFCURVE",
"125 39 QCURVE",
"108 53 OFFCURVE",
"75 90 OFFCURVE",
"45 133 OFFCURVE",
"40 140 QCURVE",
"133 194 LINE",
"147 172 OFFCURVE",
"183 133 OFFCURVE",
"203 124 QCURVE SMOOTH",
"227 113 OFFCURVE",
"257 108 OFFCURVE",
"273 108 QCURVE SMOOTH",
"296 108 LINE",
"311 108 LINE SMOOTH",
"335 108 OFFCURVE",
"365 124 QCURVE",
"402 148 OFFCURVE",
"412 194 QCURVE SMOOTH",
"415 209 OFFCURVE",
"415 222 QCURVE SMOOTH",
"415 254 OFFCURVE",
"389 279 QCURVE SMOOTH",
"378 290 OFFCURVE",
"353 301 OFFCURVE",
"327 310 QCURVE SMOOTH",
"311 317 OFFCURVE",
"273 329 QCURVE SMOOTH",
"197 355 OFFCURVE",
"180 364 QCURVE SMOOTH",
"156 376 OFFCURVE",
"141 388 QCURVE SMOOTH",
"102 419 OFFCURVE",
"59 496 OFFCURVE",
"59 537 QCURVE SMOOTH",
"59 567 OFFCURVE",
"71 597 QCURVE SMOOTH",
"89 650 OFFCURVE",
"191 725 OFFCURVE",
"265 736 QCURVE",
"291 738 OFFCURVE",
"304 738 QCURVE SMOOTH",
"392 738 OFFCURVE",
"443 698 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\01283 82 37 36 4 1 3 1 76 0 3 3 0 97 0 0 0 14 77 0 1 1 2 97 0 2 2 15 2 78 76 74 45 43 31 27 32 4 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = S;
unicode = 0053;
},
{
glyphname = T;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"50 628 LINE",
"264 628 LINE",
"264 0 LINE",
"371 0 LINE",
"371 628 LINE",
"593 628 LINE",
"593 735 LINE",
"50 735 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\0122 1 0 0 3 95 4 1 3 3 14 77 0 1 1 15 1 78 0 0 0 7 0 7 17 17 17 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = T;
unicode = 0054;
},
{
glyphname = U;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"523 283 LINE",
"512 107 OFFCURVE",
"331 107 QCURVE SMOOTH",
"249 107 OFFCURVE",
"147 192 OFFCURVE",
"147 283 QCURVE SMOOTH",
"147 735 LINE",
"40 735 LINE",
"40 237 LINE",
"41 237 LINE",
"47 168 OFFCURVE",
"127 60 OFFCURVE",
"255 0 OFFCURVE",
"331 0 QCURVE SMOOTH",
"411 0 OFFCURVE",
"545 61 OFFCURVE",
"626 170 OFFCURVE",
"630 237 QCURVE",
"630 735 LINE",
"523 735 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\0129 1 2 1 1 76 4 3 2 1 1 14 77 0 2 2 0 97 0 0 0 15 0 78 0 0 0 19 0 19 35 21 36 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
note = U;
unicode = 0055;
},
{
glyphname = V;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"40 735 LINE",
"314 0 LINE",
"462 0 LINE",
"728 735 LINE",
"603 735 LINE",
"385 150 LINE",
"173 735 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\0122 1 0 0 14 77 0 1 1 15 1 78 17 17 17 3 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 768;
}
);
note = V;
unicode = 0056;
},
{
glyphname = W;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"471 735 LINE",
"309 195 LINE",
"166 735 LINE",
"40 735 LINE",
"235 0 LINE",
"369 0 LINE",
"536 542 LINE",
"697 0 LINE",
"838 0 LINE",
"1033 735 LINE",
"908 735 LINE",
"764 192 LINE",
"596 735 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01210 5 2 1 0 1 76 4 3 2 0 0 14 77 2 1 1 1 15 1 78 18 17 18 17 17 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 1013;
}
);
note = W;
unicode = 0057;
},
{
glyphname = X;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"181 735 LINE",
"40 735 LINE",
"295 368 LINE",
"40 0 LINE",
"181 0 LINE",
"364 268 LINE",
"549 0 LINE",
"682 0 LINE",
"432 368 LINE",
"682 735 LINE",
"549 735 LINE",
"364 467 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01211 8 5 2 4 1 0 1 76 3 1 0 0 14 77 2 1 1 1 15 1 78 18 18 18 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = X;
unicode = 0058;
},
{
glyphname = Y;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"179 735 LINE",
"40 735 LINE",
"293 344 LINE",
"293 0 LINE",
"416 0 LINE",
"416 343 LINE",
"677 735 LINE",
"538 735 LINE",
"359 457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\0128 5 2 3 1 0 1 76 2 1 0 0 14 77 0 1 1 15 1 78 18 18 16 3 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 717;
}
);
note = Y;
unicode = 0059;
},
{
glyphname = Z;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"431 626 LINE",
"40 110 LINE",
"40 0 LINE",
"585 0 LINE",
"585 110 LINE",
"194 110 LINE",
"585 626 LINE",
"585 735 LINE",
"40 735 LINE",
"40 626 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\0122 1 3 7 1 1 2 75 0 3 3 0 95 0 0 0 14 77 0 1 1 2 95 0 2 2 15 2 78 18 17 18 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = Z;
unicode = 005A;
},
{
glyphname = a;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"387 500 OFFCURVE",
"293 500 QCURVE SMOOTH",
"225 500 OFFCURVE",
"108 431 OFFCURVE",
"40 314 OFFCURVE",
"40 246 QCURVE SMOOTH",
"40 178 OFFCURVE",
"108 65 OFFCURVE",
"224 0 OFFCURVE",
"293 0 QCURVE SMOOTH",
"389 0 OFFCURVE",
"455 54 QCURVE",
"455 8 LINE",
"562 8 LINE",
"562 492 LINE",
"455 492 LINE",
"455 443 LINE"
);
},
{
closed = 1;
nodes = (
"259 92 OFFCURVE",
"189 134 OFFCURVE",
"147 205 OFFCURVE",
"147 246 QCURVE SMOOTH",
"147 287 OFFCURVE",
"189 358 OFFCURVE",
"259 400 OFFCURVE",
"301 400 QCURVE SMOOTH",
"346 400 OFFCURVE",
"416 359 OFFCURVE",
"455 288 OFFCURVE",
"455 246 QCURVE SMOOTH",
"455 204 OFFCURVE",
"416 133 OFFCURVE",
"346 92 OFFCURVE",
"301 92 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01216 1 4 0 4 1 1 5 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01229 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 4 4 0 97 3 1 0 0 17 77 6 1 5 5 1 97 2 1 1 1 15 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 0 0 17 77 0 4 4 3 97 0 3 3 17 77 0 1 1 15 77 6 1 5 5 2 97 0 2 2 15 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01217 17 17 32 17 31 40 38 34 17 16 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
note = a;
unicode = 0061;
},
{
glyphname = b;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"287 500 OFFCURVE",
"204 471 OFFCURVE",
"171 445 QCURVE",
"171 735 LINE",
"60 735 LINE",
"60 7 LINE",
"171 7 LINE",
"171 56 LINE",
"203 29 OFFCURVE",
"287 0 OFFCURVE",
"334 0 QCURVE SMOOTH",
"402 0 OFFCURVE",
"519 67 OFFCURVE",
"587 183 OFFCURVE",
"587 251 QCURVE SMOOTH",
"587 319 OFFCURVE",
"519 433 OFFCURVE",
"402 500 OFFCURVE",
"334 500 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"278 97 OFFCURVE",
"209 137 OFFCURVE",
"171 208 OFFCURVE",
"171 251 QCURVE SMOOTH",
"171 317 OFFCURVE",
"255 404 OFFCURVE",
"321 404 QCURVE SMOOTH",
"364 404 OFFCURVE",
"435 363 OFFCURVE",
"476 292 OFFCURVE",
"476 251 QCURVE SMOOTH",
"476 209 OFFCURVE",
"435 138 OFFCURVE",
"364 97 OFFCURVE",
"321 97 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 10 values pushed */\01215 1 4 3 10 1 0 5 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 10 values pushed */\01215 1 4 3 10 1 1 5 2 76 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 2 2 14 77 0 4 4 3 97 6 1 3 3 17 77 7 1 5 5 0 97 1 1 0 0 15 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 2 2 14 77 0 4 4 3 97 6 1 3 3 17 77 0 1 1 15 77 7 1 5 5 0 97 0 0 0 15 0 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01219 19 0 0 19 33 19 32 27 25 0 18 0 17 17 19 38 8 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = b;
unicode = 0062;
},
{
glyphname = c;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"362 0 OFFCURVE",
"481 80 OFFCURVE",
"510 144 QCURVE",
"419 182 LINE",
"407 145 OFFCURVE",
"339 98 OFFCURVE",
"290 98 QCURVE SMOOTH",
"249 98 OFFCURVE",
"179 139 OFFCURVE",
"138 209 OFFCURVE",
"138 250 QCURVE SMOOTH",
"138 291 OFFCURVE",
"179 361 OFFCURVE",
"249 402 OFFCURVE",
"290 402 QCURVE SMOOTH",
"334 402 OFFCURVE",
"401 352 OFFCURVE",
"419 311 QCURVE",
"510 356 LINE",
"481 420 OFFCURVE",
"363 500 OFFCURVE",
"290 500 QCURVE SMOOTH",
"223 500 OFFCURVE",
"108 432 OFFCURVE",
"40 317 OFFCURVE",
"40 250 QCURVE SMOOTH",
"40 183 OFFCURVE",
"108 68 OFFCURVE",
"223 0 OFFCURVE",
"290 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\01226 25 11 10 4 2 1 1 76 0 1 1 0 97 0 0 0 17 77 0 2 2 3 97 4 1 3 3 15 3 78 0 0 0 29 0 28 38 37 38 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = c;
unicode = 0063;
},
{
glyphname = d;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"421 471 OFFCURVE",
"338 500 OFFCURVE",
"292 500 QCURVE SMOOTH",
"224 500 OFFCURVE",
"108 433 OFFCURVE",
"40 318 OFFCURVE",
"40 250 QCURVE SMOOTH",
"40 182 OFFCURVE",
"108 67 OFFCURVE",
"224 0 OFFCURVE",
"292 0 QCURVE SMOOTH",
"338 0 OFFCURVE",
"421 29 OFFCURVE",
"454 55 QCURVE",
"454 7 LINE",
"564 7 LINE",
"564 735 LINE",
"454 735 LINE",
"454 445 LINE"
);
},
{
closed = 1;
nodes = (
"262 98 OFFCURVE",
"190 138 OFFCURVE",
"149 208 OFFCURVE",
"149 250 QCURVE SMOOTH",
"149 292 OFFCURVE",
"190 362 OFFCURVE",
"262 403 OFFCURVE",
"306 403 QCURVE SMOOTH",
"370 403 OFFCURVE",
"454 316 OFFCURVE",
"454 250 QCURVE SMOOTH",
"454 185 OFFCURVE",
"370 98 OFFCURVE",
"306 98 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01218 1 4 3 4 1 1 5 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 0 0 14 77 0 4 4 3 97 0 3 3 17 77 6 1 5 5 1 97 2 1 1 1 15 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 0 0 14 77 0 4 4 3 97 0 3 3 17 77 0 1 1 15 77 6 1 5 5 2 97 0 2 2 15 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01219 19 19 32 19 31 39 38 35 17 16 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = d;
unicode = 0064;
},
{
glyphname = e;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"498 204 LINE",
"502 228 OFFCURVE",
"502 255 QCURVE SMOOTH",
"502 328 OFFCURVE",
"435 440 OFFCURVE",
"325 500 OFFCURVE",
"263 500 QCURVE SMOOTH",
"199 500 OFFCURVE",
"87 432 OFFCURVE",
"20 317 OFFCURVE",
"20 250 QCURVE SMOOTH",
"20 183 OFFCURVE",
"84 68 OFFCURVE",
"196 0 OFFCURVE",
"263 0 QCURVE SMOOTH",
"333 0 OFFCURVE",
"452 65 OFFCURVE",
"483 114 QCURVE",
"391 160 LINE",
"370 130 OFFCURVE",
"314 99 OFFCURVE",
"263 99 QCURVE",
"211 104 OFFCURVE",
"137 160 OFFCURVE",
"126 204 QCURVE"
);
},
{
closed = 1;
nodes = (
"136 343 OFFCURVE",
"213 402 OFFCURVE",
"263 402 QCURVE SMOOTH",
"311 402 OFFCURVE",
"379 340 OFFCURVE",
"391 296 QCURVE",
"119 296 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */\0126 5 2 0 3 1 76 6 1 5 0 3 0 5 3 103 0 4 4 2 97 0 2 2 17 77 0 0 0 1 97 0 1 1 15 1 78 25 25 25 31 25 31 35 21 38 37 18 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = e;
unicode = 0065;
},
{
glyphname = f;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"402 735 LINE",
"324 735 LINE SMOOTH",
"215 735 OFFCURVE",
"143 605 OFFCURVE",
"143 515 QCURVE SMOOTH",
"143 500 LINE",
"50 500 LINE",
"50 406 LINE",
"143 406 LINE",
"143 0 LINE",
"255 0 LINE",
"255 406 LINE",
"402 406 LINE",
"402 500 LINE",
"255 500 LINE",
"255 515 LINE SMOOTH",
"255 556 OFFCURVE",
"263 602 OFFCURVE",
"300 632 OFFCURVE",
"340 632 QCURVE SMOOTH",
"402 632 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */\0127 1 0 0 6 95 0 6 6 14 77 4 1 2 2 1 95 5 1 1 1 17 77 0 3 3 15 3 78 1 0 19 17 14 13 12 11 10 9 8 7 6 5 0 20 1 20 8 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = f;
unicode = 0066;
},
{
glyphname = g;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"408 473 OFFCURVE",
"326 500 OFFCURVE",
"280 500 QCURVE SMOOTH",
"213 500 OFFCURVE",
"98 436 OFFCURVE",
"30 325 OFFCURVE",
"30 258 QCURVE SMOOTH",
"30 187 OFFCURVE",
"98 69 OFFCURVE",
"213 0 OFFCURVE",
"280 0 QCURVE SMOOTH",
"326 0 OFFCURVE",
"408 29 OFFCURVE",
"440 57 QCURVE",
"440 30 LINE SMOOTH",
"440 -3 OFFCURVE",
"403 -79 OFFCURVE",
"334 -132 OFFCURVE",
"288 -132 QCURVE SMOOTH",
"211 -132 OFFCURVE",
"152 -70 QCURVE",
"69 -124 LINE",
"103 -172 OFFCURVE",
"217 -230 OFFCURVE",
"288 -230 QCURVE SMOOTH",
"359 -230 OFFCURVE",
"477 -161 OFFCURVE",
"546 -41 OFFCURVE",
"546 30 QCURVE SMOOTH",
"546 492 LINE",
"440 492 LINE",
"440 447 LINE"
);
},
{
closed = 1;
nodes = (
"252 97 OFFCURVE",
"178 142 OFFCURVE",
"136 217 OFFCURVE",
"136 258 QCURVE SMOOTH",
"136 299 OFFCURVE",
"178 368 OFFCURVE",
"251 409 OFFCURVE",
"296 409 QCURVE SMOOTH",
"337 409 OFFCURVE",
"402 368 OFFCURVE",
"440 299 OFFCURVE",
"440 258 QCURVE SMOOTH",
"440 217 OFFCURVE",
"402 142 OFFCURVE",
"336 97 OFFCURVE",
"296 97 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01231 1 5 0 17 1 3 6 10 9 2 2 3 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01229 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 5 5 0 97 4 1 0 0 17 77 7 1 6 6 3 97 0 3 3 15 77 0 2 2 1 97 0 1 1 19 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 0 0 17 77 0 5 5 4 97 0 4 4 17 77 7 1 6 6 3 97 0 3 3 15 77 0 2 2 1 97 0 1 1 19 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\01232 32 32 47 32 46 41 38 38 36 36 16 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = g;
unicode = 0067;
},
{
glyphname = h;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"210 500 OFFCURVE",
"159 459 QCURVE",
"159 735 LINE",
"50 735 LINE",
"50 0 LINE",
"159 0 LINE",
"159 272 LINE SMOOTH",
"159 320 OFFCURVE",
"217 393 OFFCURVE",
"277 393 QCURVE SMOOTH",
"340 393 OFFCURVE",
"394 327 OFFCURVE",
"394 288 QCURVE SMOOTH",
"394 0 LINE",
"503 0 LINE",
"503 312 LINE SMOOTH",
"503 364 OFFCURVE",
"459 449 OFFCURVE",
"372 500 OFFCURVE",
"308 500 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */\01217 1 1 4 1 76 0 3 3 14 77 0 1 1 4 97 5 1 4 4 17 77 2 1 0 0 15 0 78 0 0 0 19 0 18 17 19 35 20 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = h;
unicode = 0068;
},
{
glyphname = i;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"167 735 OFFCURVE",
"210 692 OFFCURVE",
"210 656 QCURVE SMOOTH",
"210 625 OFFCURVE",
"166 585 OFFCURVE",
"131 585 QCURVE SMOOTH",
"101 585 OFFCURVE",
"60 626 OFFCURVE",
"60 656 QCURVE SMOOTH",
"60 691 OFFCURVE",
"100 735 OFFCURVE",
"131 735 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"76 0 LINE",
"76 500 LINE",
"187 500 LINE",
"187 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\0120 0 0 1 97 4 1 1 1 14 77 0 2 2 17 77 0 3 3 15 3 78 0 0 15 14 13 12 0 11 0 10 36 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 250;
}
);
note = i;
unicode = 0069;
},
{
glyphname = j;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"291 599 OFFCURVE",
"331 642 OFFCURVE",
"331 671 QCURVE SMOOTH",
"331 695 OFFCURVE",
"291 735 OFFCURVE",
"267 735 QCURVE SMOOTH",
"237 735 OFFCURVE",
"194 696 OFFCURVE",
"194 671 QCURVE SMOOTH",
"194 641 OFFCURVE",
"237 599 OFFCURVE",
"267 599 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"212 -47 OFFCURVE",
"170 -128 OFFCURVE",
"107 -128 QCURVE SMOOTH",
"101 -128 OFFCURVE",
"90 -125 OFFCURVE",
"87 -125 QCURVE",
"63 -120 OFFCURVE",
"50 -119 QCURVE",
"50 -223 LINE",
"79 -228 OFFCURVE",
"109 -230 OFFCURVE",
"146 -230 QCURVE SMOOTH",
"237 -230 OFFCURVE",
"323 -100 OFFCURVE",
"323 0 QCURVE SMOOTH",
"323 500 LINE",
"212 500 LINE",
"212 0 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */\01221 1 4 2 20 1 3 4 2 76 5 1 1 1 0 97 0 0 0 14 77 0 2 2 17 77 0 4 4 3 98 0 3 3 19 3 78 0 0 27 25 19 16 13 12 0 11 0 10 36 6 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 381;
}
);
note = j;
unicode = 006A;
},
{
glyphname = k;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"167 735 LINE",
"50 735 LINE",
"50 0 LINE",
"167 0 LINE",
"167 111 LINE",
"238 190 LINE",
"378 0 LINE",
"511 0 LINE",
"311 271 LINE",
"518 500 LINE",
"370 500 LINE",
"167 249 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */\01211 6 5 2 4 1 0 1 76 0 3 3 14 77 0 0 0 17 77 2 1 1 1 15 1 78 17 19 18 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = k;
unicode = 006B;
},
{
glyphname = l;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"70 0 LINE",
"70 735 LINE",
"174 735 LINE",
"174 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 0 0 14 77 0 1 1 15 1 78 17 16 2 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 234;
}
);
note = l;
unicode = 006C;
},
{
glyphname = m;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"779 358 OFFCURVE",
"736 446 OFFCURVE",
"654 500 OFFCURVE",
"596 500 QCURVE SMOOTH",
"482 500 OFFCURVE",
"436 414 QCURVE",
"412 454 OFFCURVE",
"333 500 OFFCURVE",
"281 500 QCURVE SMOOTH",
"203 500 OFFCURVE",
"158 458 QCURVE",
"158 485 LINE",
"50 485 LINE",
"50 0 LINE",
"158 0 LINE",
"158 277 LINE SMOOTH",
"158 393 OFFCURVE",
"258 393 QCURVE SMOOTH",
"314 393 OFFCURVE",
"357 325 OFFCURVE",
"357 284 QCURVE SMOOTH",
"357 0 LINE",
"466 0 LINE",
"466 277 LINE SMOOTH",
"466 324 OFFCURVE",
"513 393 OFFCURVE",
"565 393 QCURVE SMOOTH",
"621 393 OFFCURVE",
"666 325 OFFCURVE",
"666 284 QCURVE SMOOTH",
"666 0 LINE",
"781 0 LINE",
"781 307 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01226 21 2 1 5 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0123 1 1 1 5 97 7 6 2 5 5 17 77 4 2 2 0 0 15 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 5 5 17 77 3 1 1 1 6 97 7 1 6 6 17 77 4 2 2 0 0 15 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0123 1 1 1 6 97 7 1 6 6 17 77 0 5 5 0 95 4 2 2 0 0 15 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01235 34 17 18 35 19 35 16 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 831;
}
);
note = m;
unicode = 006D;
},
{
glyphname = n;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"512 356 OFFCURVE",
"468 445 OFFCURVE",
"381 500 OFFCURVE",
"319 500 QCURVE SMOOTH",
"222 500 OFFCURVE",
"170 451 QCURVE",
"170 484 LINE",
"60 484 LINE",
"60 0 LINE",
"170 0 LINE",
"170 265 LINE SMOOTH",
"170 314 OFFCURVE",
"228 390 OFFCURVE",
"287 390 QCURVE SMOOTH",
"350 390 OFFCURVE",
"404 318 OFFCURVE",
"404 273 QCURVE SMOOTH",
"404 0 LINE",
"514 0 LINE",
"514 304 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01213 1 1 3 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01215 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 1 1 3 97 4 1 3 3 17 77 2 1 0 0 15 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01231 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 3 3 17 77 0 1 1 4 97 0 4 4 17 77 2 1 0 0 15 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 1 4 97 0 4 4 17 77 0 3 3 0 95 2 1 0 0 15 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01234 17 19 35 16 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = n;
unicode = 006E;
},
{
glyphname = o;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"347 500 OFFCURVE",
"458 432 OFFCURVE",
"522 317 OFFCURVE",
"522 250 QCURVE SMOOTH",
"522 183 OFFCURVE",
"458 68 OFFCURVE",
"347 0 OFFCURVE",
"280 0 QCURVE SMOOTH",
"213 0 OFFCURVE",
"98 68 OFFCURVE",
"30 183 OFFCURVE",
"30 250 QCURVE SMOOTH",
"30 317 OFFCURVE",
"98 432 OFFCURVE",
"213 500 OFFCURVE",
"280 500 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"136 213 OFFCURVE",
"173 150 OFFCURVE",
"235 114 OFFCURVE",
"272 114 QCURVE SMOOTH",
"313 114 OFFCURVE",
"379 150 OFFCURVE",
"416 212 OFFCURVE",
"416 250 QCURVE SMOOTH",
"416 288 OFFCURVE",
"379 350 OFFCURVE",
"313 386 OFFCURVE",
"272 386 QCURVE SMOOTH",
"235 386 OFFCURVE",
"173 350 OFFCURVE",
"136 287 OFFCURVE",
"136 250 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\0120 2 2 1 97 4 1 1 1 17 77 0 3 3 0 97 0 0 0 15 0 78 0 0 28 26 20 18 0 15 0 14 38 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = o;
unicode = 006F;
},
{
glyphname = p;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"291 500 OFFCURVE",
"207 471 OFFCURVE",
"175 444 QCURVE",
"175 493 LINE",
"60 493 LINE",
"60 -230 LINE",
"175 -230 LINE",
"175 57 LINE",
"207 29 OFFCURVE",
"290 0 OFFCURVE",
"337 0 QCURVE SMOOTH",
"405 0 OFFCURVE",
"518 69 OFFCURVE",
"584 185 OFFCURVE",
"584 253 QCURVE SMOOTH",
"584 318 OFFCURVE",
"518 432 OFFCURVE",
"405 500 OFFCURVE",
"337 500 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"258 100 OFFCURVE",
"175 185 OFFCURVE",
"175 253 QCURVE SMOOTH",
"175 317 OFFCURVE",
"258 400 OFFCURVE",
"322 400 QCURVE SMOOTH",
"363 400 OFFCURVE",
"434 359 OFFCURVE",
"476 291 OFFCURVE",
"476 253 QCURVE SMOOTH",
"476 212 OFFCURVE",
"434 141 OFFCURVE",
"363 100 OFFCURVE",
"322 100 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01215 1 4 2 10 1 0 5 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 4 4 2 97 6 3 2 2 2 17 77 7 1 5 5 0 97 0 0 0 15 77 0 1 1 19 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 2 2 17 77 0 4 4 3 97 6 1 3 3 17 77 7 1 5 5 0 97 0 0 0 15 77 0 1 1 19 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01219 19 0 0 19 32 19 31 27 25 0 18 0 17 17 19 38 8 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = p;
unicode = 0070;
},
{
glyphname = q;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"419 471 OFFCURVE",
"338 500 OFFCURVE",
"293 500 QCURVE SMOOTH",
"226 500 OFFCURVE",
"114 432 OFFCURVE",
"50 318 OFFCURVE",
"50 254 QCURVE SMOOTH",
"50 187 OFFCURVE",
"114 70 OFFCURVE",
"226 0 OFFCURVE",
"293 0 QCURVE SMOOTH",
"338 0 OFFCURVE",
"419 30 OFFCURVE",
"451 57 QCURVE",
"451 -230 LINE",
"565 -230 LINE",
"565 492 LINE",
"451 492 LINE",
"451 444 LINE"
);
},
{
closed = 1;
nodes = (
"266 102 OFFCURVE",
"196 143 OFFCURVE",
"155 213 OFFCURVE",
"155 254 QCURVE SMOOTH",
"155 292 OFFCURVE",
"196 358 OFFCURVE",
"266 398 OFFCURVE",
"307 398 QCURVE SMOOTH",
"370 398 OFFCURVE",
"451 316 OFFCURVE",
"451 254 QCURVE SMOOTH",
"451 186 OFFCURVE",
"370 102 OFFCURVE",
"307 102 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01218 1 4 0 4 1 2 5 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01229 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 4 4 0 97 3 1 0 0 17 77 6 1 5 5 2 97 0 2 2 15 77 0 1 1 19 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 0 0 17 77 0 4 4 3 97 0 3 3 17 77 6 1 5 5 2 97 0 2 2 15 77 0 1 1 19 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01219 19 19 32 19 31 39 38 35 17 16 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = q;
unicode = 0071;
},
{
glyphname = r;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"234 502 OFFCURVE",
"186 444 QCURVE",
"186 487 LINE",
"70 487 LINE",
"70 0 LINE",
"186 0 LINE",
"186 254 LINE SMOOTH",
"186 309 OFFCURVE",
"235 393 OFFCURVE",
"301 393 QCURVE SMOOTH",
"347 393 LINE",
"347 500 LINE",
"324 502 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 10 values pushed */\01210 1 0 2 1 76 0 1 2 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 10 values pushed */\0120 1 2 3 10 1 0 2 2 76 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0120 0 0 2 97 3 1 2 2 17 77 0 1 1 15 1 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01237 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 2 2 17 77 0 0 0 3 97 0 3 3 17 77 0 1 1 15 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 0 3 97 0 3 3 17 77 0 2 2 1 95 0 1 1 15 1 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01218 17 19 33 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = r;
unicode = 0072;
},
{
glyphname = s;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"407 440 OFFCURVE",
"320 502 OFFCURVE",
"252 502 QCURVE SMOOTH",
"242 502 OFFCURVE",
"218 500 QCURVE SMOOTH",
"163 494 OFFCURVE",
"80 443 OFFCURVE",
"63 399 QCURVE SMOOTH",
"59 388 OFFCURVE",
"59 373 QCURVE SMOOTH",
"59 349 OFFCURVE",
"71 313 QCURVE SMOOTH",
"79 292 OFFCURVE",
"105 267 OFFCURVE",
"141 240 QCURVE",
"169 226 OFFCURVE",
"218 209 QCURVE SMOOTH",
"241 201 LINE",
"241 201 LINE",
"265 193 LINE SMOOTH",
"294 184 OFFCURVE",
"311 163 QCURVE SMOOTH",
"322 148 OFFCURVE",
"322 136 QCURVE SMOOTH",
"322 130 OFFCURVE",
"319 124 QCURVE SMOOTH",
"303 92 OFFCURVE",
"257 92 QCURVE SMOOTH",
"226 93 LINE SMOOTH",
"208 93 OFFCURVE",
"193 95 OFFCURVE",
"176 101 QCURVE",
"156 116 LINE",
"141 131 LINE SMOOTH",
"136 136 OFFCURVE",
"129 145 OFFCURVE",
"125 155 QCURVE",
"40 116 LINE",
"68 44 OFFCURVE",
"117 23 QCURVE",
"143 8 OFFCURVE",
"205 0 OFFCURVE",
"257 0 QCURVE SMOOTH",
"309 0 OFFCURVE",
"388 44 OFFCURVE",
"411 85 QCURVE SMOOTH",
"428 112 OFFCURVE",
"428 143 QCURVE SMOOTH",
"428 156 OFFCURVE",
"427 163 QCURVE SMOOTH",
"423 205 OFFCURVE",
"381 247 QCURVE SMOOTH",
"369 259 OFFCURVE",
"357 263 QCURVE SMOOTH",
"329 272 OFFCURVE",
"268 294 OFFCURVE",
"249 302 QCURVE SMOOTH",
"227 311 LINE SMOOTH",
"204 318 OFFCURVE",
"187 326 QCURVE SMOOTH",
"169 333 OFFCURVE",
"164 345 QCURVE SMOOTH",
"161 351 OFFCURVE",
"161 360 QCURVE SMOOTH",
"161 369 OFFCURVE",
"164 379 QCURVE",
"164 379 LINE",
"170 391 LINE SMOOTH",
"176 401 OFFCURVE",
"214 414 OFFCURVE",
"241 414 QCURVE SMOOTH",
"262 414 OFFCURVE",
"300 398 OFFCURVE",
"335 372 OFFCURVE",
"342 368 QCURVE",
"427 399 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\01275 38 37 25 4 2 0 1 76 0 0 0 3 97 0 3 3 17 77 0 2 2 1 97 0 1 1 15 1 78 73 71 48 45 33 31 35 4 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 468;
}
);
note = s;
unicode = 0073;
},
{
glyphname = t;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"242 500 LINE",
"242 639 LINE",
"133 593 LINE",
"133 500 LINE",
"40 500 LINE",
"40 399 LINE",
"133 399 LINE",
"133 140 LINE SMOOTH",
"134 73 OFFCURVE",
"194 0 OFFCURVE",
"281 0 QCURVE SMOOTH",
"297 0 OFFCURVE",
"335 7 QCURVE",
"335 101 LINE",
"297 101 LINE SMOOTH",
"265 101 OFFCURVE",
"242 127 OFFCURVE",
"242 149 QCURVE SMOOTH",
"242 399 LINE",
"359 399 LINE",
"359 500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\0127 1 2 1 1 76 18 17 2 4 74 3 1 0 0 4 95 5 1 4 4 17 77 0 1 1 2 97 0 2 2 15 2 78 19 17 19 34 35 16 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 419;
}
);
note = t;
unicode = 0074;
},
{
glyphname = u;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"414 186 OFFCURVE",
"355 109 OFFCURVE",
"296 109 QCURVE SMOOTH",
"233 109 OFFCURVE",
"179 181 OFFCURVE",
"179 226 QCURVE SMOOTH",
"179 500 LINE",
"70 500 LINE",
"70 196 LINE SMOOTH",
"70 143 OFFCURVE",
"114 54 OFFCURVE",
"206 0 OFFCURVE",
"273 0 QCURVE SMOOTH",
"364 0 OFFCURVE",
"414 48 QCURVE",
"414 8 LINE",
"523 8 LINE",
"523 500 LINE",
"414 500 LINE",
"414 234 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0124 1 1 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01229 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0123 1 0 0 17 77 0 4 4 1 97 2 1 1 1 15 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0123 1 0 0 17 77 0 1 1 15 77 0 4 4 2 97 0 2 2 15 2 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01235 20 34 17 16 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = u;
unicode = 0075;
},
{
glyphname = v;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"20 500 LINE",
"222 0 LINE",
"367 0 LINE",
"576 500 LINE",
"455 500 LINE",
"298 110 LINE",
"141 500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\0122 1 0 0 17 77 0 1 1 15 1 78 17 17 17 3 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = v;
unicode = 0076;
},
{
glyphname = w;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"330 500 LINE",
"233 166 LINE",
"153 500 LINE",
"40 500 LINE",
"177 0 LINE",
"282 0 LINE",
"389 333 LINE",
"492 0 LINE",
"605 0 LINE",
"741 500 LINE",
"628 500 LINE",
"547 161 LINE",
"443 500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01210 5 2 1 0 1 76 4 3 2 0 0 17 77 2 1 1 1 15 1 78 18 17 18 17 17 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = w;
unicode = 0077;
},
{
glyphname = x;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"165 500 LINE",
"20 500 LINE",
"210 250 LINE",
"20 0 LINE",
"165 0 LINE",
"282 154 LINE",
"399 0 LINE",
"544 0 LINE",
"355 250 LINE",
"544 500 LINE",
"399 500 LINE",
"282 346 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01211 8 5 2 4 1 0 1 76 3 1 0 0 17 77 2 1 1 1 15 1 78 18 18 18 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = x;
unicode = 0078;
},
{
glyphname = y;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"155 500 LINE",
"20 500 LINE",
"256 4 LINE",
"242 -42 LINE SMOOTH",
"225 -87 OFFCURVE",
"144 -127 OFFCURVE",
"91 -127 QCURVE SMOOTH",
"76 -127 LINE",
"76 -230 LINE",
"91 -230 LINE SMOOTH",
"196 -230 OFFCURVE",
"315 -154 OFFCURVE",
"345 -74 QCURVE",
"582 500 LINE",
"447 500 LINE",
"320 152 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01215 12 2 2 0 1 76 3 1 0 0 17 77 0 2 2 1 98 0 1 1 19 1 78 20 33 35 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = y;
unicode = 0079;
},
{
glyphname = z;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"50 403 LINE",
"324 403 LINE",
"50 97 LINE",
"50 0 LINE",
"477 0 LINE",
"477 97 LINE",
"211 97 LINE",
"477 403 LINE",
"477 500 LINE",
"50 500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */\0121 1 2 6 1 0 2 75 0 2 2 3 95 4 1 3 3 17 77 0 0 0 1 95 0 1 1 15 1 78 0 0 0 9 0 9 18 17 18 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 527;
}
);
note = z;
unicode = 007A;
},
{
glyphname = zero;
lastChange = "2021-02-10 03:30:04 +0000";
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"298 363 LINE",
"298 634 LINE",
"354 634 OFFCURVE",
"381 604 OFFCURVE",
"404 579 CURVE",
"426 542 OFFCURVE",
"439 512 OFFCURVE",
"439 441 CURVE",
"439 363 LINE",
"536 363 LINE",
"536 479 OFFCURVE",
"536 573 OFFCURVE",
"473 659 CURVE",
"430 713 OFFCURVE",
"375 735 OFFCURVE",
"298 735 CURVE"
);
},
{
closed = 1;
nodes = (
"298 634 LINE",
"248 634 OFFCURVE",
"218 603 OFFCURVE",
"199 581 CURVE",
"177 548 OFFCURVE",
"163 512 OFFCURVE",
"163 441 CURVE",
"163 363 LINE",
"65 363 LINE",
"65 479 OFFCURVE",
"65 573 OFFCURVE",
"128 659 CURVE",
"171 713 OFFCURVE",
"228 735 OFFCURVE",
"298 735 CURVE"
);
},
{
closed = 1;
nodes = (
"298 101 LINE",
"248 101 OFFCURVE",
"218 123 OFFCURVE",
"199 154 CURVE",
"177 178 OFFCURVE",
"163 216 OFFCURVE",
"163 294 CURVE",
"163 363 LINE",
"298 363 LINE",
"65 363 LINE",
"65 256 OFFCURVE",
"65 162 OFFCURVE",
"128 76 CURVE",
"171 22 OFFCURVE",
"228 0 OFFCURVE",
"298 0 CURVE"
);
},
{
closed = 1;
nodes = (
"430 22 OFFCURVE",
"375 0 OFFCURVE",
"298 0 CURVE",
"298 363 LINE",
"298 101 LINE",
"354 101 OFFCURVE",
"381 123 OFFCURVE",
"404 154 CURVE SMOOTH",
"424 178 OFFCURVE",
"439 216 OFFCURVE",
"439 294 CURVE SMOOTH",
"439 363 LINE",
"298 363 LINE",
"536 363 LINE",
"536 256 OFFCURVE",
"536 162 OFFCURVE",
"473 76 CURVE SMOOTH"
);
}
);
width = 600;
}
);
note = zero;
unicode = 0030;
},
{
glyphname = one;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
width = 600;
}
);
note = one;
unicode = 0031;
},
{
glyphname = two;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
width = 600;
}
);
note = two;
unicode = 0032;
},
{
glyphname = three;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
width = 600;
}
);
note = three;
unicode = 0033;
},
{
glyphname = four;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
width = 600;
}
);
note = four;
unicode = 0034;
},
{
glyphname = five;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
width = 600;
}
);
note = five;
unicode = 0035;
},
{
glyphname = six;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
width = 600;
}
);
note = six;
unicode = 0036;
},
{
glyphname = seven;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
width = 600;
}
);
note = seven;
unicode = 0037;
},
{
glyphname = eight;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
width = 600;
}
);
note = eight;
unicode = 0038;
},
{
glyphname = nine;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
width = 600;
}
);
note = nine;
unicode = 0039;
},
{
glyphname = period;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"123 125 OFFCURVE",
"162 89 OFFCURVE",
"162 66 QCURVE SMOOTH",
"162 38 OFFCURVE",
"124 0 OFFCURVE",
"96 0 QCURVE SMOOTH",
"68 0 OFFCURVE",
"30 38 OFFCURVE",
"30 66 QCURVE SMOOTH",
"30 89 OFFCURVE",
"69 125 OFFCURVE",
"96 125 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0122 1 1 1 0 97 0 0 0 15 0 78 0 0 0 11 0 10 36 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 192;
}
);
note = period;
unicode = 002E;
},
{
glyphname = comma;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
width = 600;
}
);
note = comma;
unicode = 002C;
},
{
glyphname = exclam;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
paths = (
{
closed = 1;
nodes = (
"172 735 LINE",
"40 735 LINE",
"62 206 LINE",
"150 206 LINE"
);
},
{
closed = 1;
nodes = (
"79 125 OFFCURVE",
"40 89 OFFCURVE",
"40 66 QCURVE SMOOTH",
"40 38 OFFCURVE",
"78 0 OFFCURVE",
"106 0 QCURVE SMOOTH",
"134 0 OFFCURVE",
"172 38 OFFCURVE",
"172 66 QCURVE SMOOTH",
"172 89 OFFCURVE",
"133 125 OFFCURVE",
"106 125 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\0124 1 1 1 0 95 0 0 0 14 77 5 1 3 3 2 97 0 2 2 15 2 78 4 4 0 0 4 15 4 14 10 8 0 3 0 3 17 6 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
note = exclam;
unicode = 0021;
},
{
glyphname = hyphen;
layers = (
{
layerId = "D2426170-52AE-4FAB-827B-222948BED425";
width = 600;
}
);
note = hyphen;
unicode = 002D;
}
);
instances = (
{
customParameters = (
{
name = postscriptFullName;
value = "Westwood Sans Regular";
},
{
name = postscriptFontName;
value = "WestwoodSans-Regular";
}
);
instanceInterpolations = {
"D2426170-52AE-4FAB-827B-222948BED425" = 1;
};
name = Regular;
weightClass = Normal;
}
);
unitsPerEm = 1000;
versionMajor = 0;
versionMinor = 2;
}
